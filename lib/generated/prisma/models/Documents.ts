
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Documents` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Documents
 * 
 */
export type DocumentsModel = runtime.Types.Result.DefaultSelection<Prisma.$DocumentsPayload>

export type AggregateDocuments = {
  _count: DocumentsCountAggregateOutputType | null
  _avg: DocumentsAvgAggregateOutputType | null
  _sum: DocumentsSumAggregateOutputType | null
  _min: DocumentsMinAggregateOutputType | null
  _max: DocumentsMaxAggregateOutputType | null
}

export type DocumentsAvgAggregateOutputType = {
  id: number | null
  ownerId: number | null
}

export type DocumentsSumAggregateOutputType = {
  id: number | null
  ownerId: number | null
}

export type DocumentsMinAggregateOutputType = {
  id: number | null
  title: string | null
  ownerId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DocumentsMaxAggregateOutputType = {
  id: number | null
  title: string | null
  ownerId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DocumentsCountAggregateOutputType = {
  id: number
  title: number
  ownerId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DocumentsAvgAggregateInputType = {
  id?: true
  ownerId?: true
}

export type DocumentsSumAggregateInputType = {
  id?: true
  ownerId?: true
}

export type DocumentsMinAggregateInputType = {
  id?: true
  title?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
}

export type DocumentsMaxAggregateInputType = {
  id?: true
  title?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
}

export type DocumentsCountAggregateInputType = {
  id?: true
  title?: true
  ownerId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DocumentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Documents to aggregate.
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Documents to fetch.
   */
  orderBy?: Prisma.DocumentsOrderByWithRelationInput | Prisma.DocumentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DocumentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Documents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Documents
  **/
  _count?: true | DocumentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DocumentsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DocumentsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DocumentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DocumentsMaxAggregateInputType
}

export type GetDocumentsAggregateType<T extends DocumentsAggregateArgs> = {
      [P in keyof T & keyof AggregateDocuments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDocuments[P]>
    : Prisma.GetScalarType<T[P], AggregateDocuments[P]>
}




export type DocumentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DocumentsWhereInput
  orderBy?: Prisma.DocumentsOrderByWithAggregationInput | Prisma.DocumentsOrderByWithAggregationInput[]
  by: Prisma.DocumentsScalarFieldEnum[] | Prisma.DocumentsScalarFieldEnum
  having?: Prisma.DocumentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DocumentsCountAggregateInputType | true
  _avg?: DocumentsAvgAggregateInputType
  _sum?: DocumentsSumAggregateInputType
  _min?: DocumentsMinAggregateInputType
  _max?: DocumentsMaxAggregateInputType
}

export type DocumentsGroupByOutputType = {
  id: number
  title: string
  ownerId: number
  createdAt: Date
  updatedAt: Date
  _count: DocumentsCountAggregateOutputType | null
  _avg: DocumentsAvgAggregateOutputType | null
  _sum: DocumentsSumAggregateOutputType | null
  _min: DocumentsMinAggregateOutputType | null
  _max: DocumentsMaxAggregateOutputType | null
}

type GetDocumentsGroupByPayload<T extends DocumentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DocumentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DocumentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DocumentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DocumentsGroupByOutputType[P]>
      }
    >
  >



export type DocumentsWhereInput = {
  AND?: Prisma.DocumentsWhereInput | Prisma.DocumentsWhereInput[]
  OR?: Prisma.DocumentsWhereInput[]
  NOT?: Prisma.DocumentsWhereInput | Prisma.DocumentsWhereInput[]
  id?: Prisma.IntFilter<"Documents"> | number
  title?: Prisma.StringFilter<"Documents"> | string
  ownerId?: Prisma.IntFilter<"Documents"> | number
  createdAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  blocks?: Prisma.BlockListRelationFilter
}

export type DocumentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  owner?: Prisma.UserOrderByWithRelationInput
  blocks?: Prisma.BlockOrderByRelationAggregateInput
}

export type DocumentsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.DocumentsWhereInput | Prisma.DocumentsWhereInput[]
  OR?: Prisma.DocumentsWhereInput[]
  NOT?: Prisma.DocumentsWhereInput | Prisma.DocumentsWhereInput[]
  title?: Prisma.StringFilter<"Documents"> | string
  ownerId?: Prisma.IntFilter<"Documents"> | number
  createdAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
  owner?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  blocks?: Prisma.BlockListRelationFilter
}, "id">

export type DocumentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DocumentsCountOrderByAggregateInput
  _avg?: Prisma.DocumentsAvgOrderByAggregateInput
  _max?: Prisma.DocumentsMaxOrderByAggregateInput
  _min?: Prisma.DocumentsMinOrderByAggregateInput
  _sum?: Prisma.DocumentsSumOrderByAggregateInput
}

export type DocumentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.DocumentsScalarWhereWithAggregatesInput | Prisma.DocumentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.DocumentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DocumentsScalarWhereWithAggregatesInput | Prisma.DocumentsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Documents"> | number
  title?: Prisma.StringWithAggregatesFilter<"Documents"> | string
  ownerId?: Prisma.IntWithAggregatesFilter<"Documents"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Documents"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Documents"> | Date | string
}

export type DocumentsCreateInput = {
  title: string
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutDocumentsInput
  blocks?: Prisma.BlockCreateNestedManyWithoutDocumentInput
}

export type DocumentsUncheckedCreateInput = {
  id?: number
  title: string
  ownerId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  blocks?: Prisma.BlockUncheckedCreateNestedManyWithoutDocumentInput
}

export type DocumentsUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutDocumentsNestedInput
  blocks?: Prisma.BlockUpdateManyWithoutDocumentNestedInput
}

export type DocumentsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  ownerId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blocks?: Prisma.BlockUncheckedUpdateManyWithoutDocumentNestedInput
}

export type DocumentsCreateManyInput = {
  id?: number
  title: string
  ownerId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentsUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  ownerId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentsListRelationFilter = {
  every?: Prisma.DocumentsWhereInput
  some?: Prisma.DocumentsWhereInput
  none?: Prisma.DocumentsWhereInput
}

export type DocumentsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DocumentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
}

export type DocumentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DocumentsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
}

export type DocumentsScalarRelationFilter = {
  is?: Prisma.DocumentsWhereInput
  isNot?: Prisma.DocumentsWhereInput
}

export type DocumentsCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput> | Prisma.DocumentsCreateWithoutOwnerInput[] | Prisma.DocumentsUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutOwnerInput | Prisma.DocumentsCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.DocumentsCreateManyOwnerInputEnvelope
  connect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
}

export type DocumentsUncheckedCreateNestedManyWithoutOwnerInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput> | Prisma.DocumentsCreateWithoutOwnerInput[] | Prisma.DocumentsUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutOwnerInput | Prisma.DocumentsCreateOrConnectWithoutOwnerInput[]
  createMany?: Prisma.DocumentsCreateManyOwnerInputEnvelope
  connect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
}

export type DocumentsUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput> | Prisma.DocumentsCreateWithoutOwnerInput[] | Prisma.DocumentsUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutOwnerInput | Prisma.DocumentsCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.DocumentsUpsertWithWhereUniqueWithoutOwnerInput | Prisma.DocumentsUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.DocumentsCreateManyOwnerInputEnvelope
  set?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  disconnect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  delete?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  connect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  update?: Prisma.DocumentsUpdateWithWhereUniqueWithoutOwnerInput | Prisma.DocumentsUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.DocumentsUpdateManyWithWhereWithoutOwnerInput | Prisma.DocumentsUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.DocumentsScalarWhereInput | Prisma.DocumentsScalarWhereInput[]
}

export type DocumentsUncheckedUpdateManyWithoutOwnerNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput> | Prisma.DocumentsCreateWithoutOwnerInput[] | Prisma.DocumentsUncheckedCreateWithoutOwnerInput[]
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutOwnerInput | Prisma.DocumentsCreateOrConnectWithoutOwnerInput[]
  upsert?: Prisma.DocumentsUpsertWithWhereUniqueWithoutOwnerInput | Prisma.DocumentsUpsertWithWhereUniqueWithoutOwnerInput[]
  createMany?: Prisma.DocumentsCreateManyOwnerInputEnvelope
  set?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  disconnect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  delete?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  connect?: Prisma.DocumentsWhereUniqueInput | Prisma.DocumentsWhereUniqueInput[]
  update?: Prisma.DocumentsUpdateWithWhereUniqueWithoutOwnerInput | Prisma.DocumentsUpdateWithWhereUniqueWithoutOwnerInput[]
  updateMany?: Prisma.DocumentsUpdateManyWithWhereWithoutOwnerInput | Prisma.DocumentsUpdateManyWithWhereWithoutOwnerInput[]
  deleteMany?: Prisma.DocumentsScalarWhereInput | Prisma.DocumentsScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type DocumentsCreateNestedOneWithoutBlocksInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutBlocksInput, Prisma.DocumentsUncheckedCreateWithoutBlocksInput>
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutBlocksInput
  connect?: Prisma.DocumentsWhereUniqueInput
}

export type DocumentsUpdateOneRequiredWithoutBlocksNestedInput = {
  create?: Prisma.XOR<Prisma.DocumentsCreateWithoutBlocksInput, Prisma.DocumentsUncheckedCreateWithoutBlocksInput>
  connectOrCreate?: Prisma.DocumentsCreateOrConnectWithoutBlocksInput
  upsert?: Prisma.DocumentsUpsertWithoutBlocksInput
  connect?: Prisma.DocumentsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DocumentsUpdateToOneWithWhereWithoutBlocksInput, Prisma.DocumentsUpdateWithoutBlocksInput>, Prisma.DocumentsUncheckedUpdateWithoutBlocksInput>
}

export type DocumentsCreateWithoutOwnerInput = {
  title: string
  createdAt?: Date | string
  updatedAt?: Date | string
  blocks?: Prisma.BlockCreateNestedManyWithoutDocumentInput
}

export type DocumentsUncheckedCreateWithoutOwnerInput = {
  id?: number
  title: string
  createdAt?: Date | string
  updatedAt?: Date | string
  blocks?: Prisma.BlockUncheckedCreateNestedManyWithoutDocumentInput
}

export type DocumentsCreateOrConnectWithoutOwnerInput = {
  where: Prisma.DocumentsWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput>
}

export type DocumentsCreateManyOwnerInputEnvelope = {
  data: Prisma.DocumentsCreateManyOwnerInput | Prisma.DocumentsCreateManyOwnerInput[]
}

export type DocumentsUpsertWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.DocumentsWhereUniqueInput
  update: Prisma.XOR<Prisma.DocumentsUpdateWithoutOwnerInput, Prisma.DocumentsUncheckedUpdateWithoutOwnerInput>
  create: Prisma.XOR<Prisma.DocumentsCreateWithoutOwnerInput, Prisma.DocumentsUncheckedCreateWithoutOwnerInput>
}

export type DocumentsUpdateWithWhereUniqueWithoutOwnerInput = {
  where: Prisma.DocumentsWhereUniqueInput
  data: Prisma.XOR<Prisma.DocumentsUpdateWithoutOwnerInput, Prisma.DocumentsUncheckedUpdateWithoutOwnerInput>
}

export type DocumentsUpdateManyWithWhereWithoutOwnerInput = {
  where: Prisma.DocumentsScalarWhereInput
  data: Prisma.XOR<Prisma.DocumentsUpdateManyMutationInput, Prisma.DocumentsUncheckedUpdateManyWithoutOwnerInput>
}

export type DocumentsScalarWhereInput = {
  AND?: Prisma.DocumentsScalarWhereInput | Prisma.DocumentsScalarWhereInput[]
  OR?: Prisma.DocumentsScalarWhereInput[]
  NOT?: Prisma.DocumentsScalarWhereInput | Prisma.DocumentsScalarWhereInput[]
  id?: Prisma.IntFilter<"Documents"> | number
  title?: Prisma.StringFilter<"Documents"> | string
  ownerId?: Prisma.IntFilter<"Documents"> | number
  createdAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Documents"> | Date | string
}

export type DocumentsCreateWithoutBlocksInput = {
  title: string
  createdAt?: Date | string
  updatedAt?: Date | string
  owner: Prisma.UserCreateNestedOneWithoutDocumentsInput
}

export type DocumentsUncheckedCreateWithoutBlocksInput = {
  id?: number
  title: string
  ownerId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentsCreateOrConnectWithoutBlocksInput = {
  where: Prisma.DocumentsWhereUniqueInput
  create: Prisma.XOR<Prisma.DocumentsCreateWithoutBlocksInput, Prisma.DocumentsUncheckedCreateWithoutBlocksInput>
}

export type DocumentsUpsertWithoutBlocksInput = {
  update: Prisma.XOR<Prisma.DocumentsUpdateWithoutBlocksInput, Prisma.DocumentsUncheckedUpdateWithoutBlocksInput>
  create: Prisma.XOR<Prisma.DocumentsCreateWithoutBlocksInput, Prisma.DocumentsUncheckedCreateWithoutBlocksInput>
  where?: Prisma.DocumentsWhereInput
}

export type DocumentsUpdateToOneWithWhereWithoutBlocksInput = {
  where?: Prisma.DocumentsWhereInput
  data: Prisma.XOR<Prisma.DocumentsUpdateWithoutBlocksInput, Prisma.DocumentsUncheckedUpdateWithoutBlocksInput>
}

export type DocumentsUpdateWithoutBlocksInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  owner?: Prisma.UserUpdateOneRequiredWithoutDocumentsNestedInput
}

export type DocumentsUncheckedUpdateWithoutBlocksInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  ownerId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DocumentsCreateManyOwnerInput = {
  id?: number
  title: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DocumentsUpdateWithoutOwnerInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blocks?: Prisma.BlockUpdateManyWithoutDocumentNestedInput
}

export type DocumentsUncheckedUpdateWithoutOwnerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  blocks?: Prisma.BlockUncheckedUpdateManyWithoutDocumentNestedInput
}

export type DocumentsUncheckedUpdateManyWithoutOwnerInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DocumentsCountOutputType
 */

export type DocumentsCountOutputType = {
  blocks: number
}

export type DocumentsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  blocks?: boolean | DocumentsCountOutputTypeCountBlocksArgs
}

/**
 * DocumentsCountOutputType without action
 */
export type DocumentsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DocumentsCountOutputType
   */
  select?: Prisma.DocumentsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DocumentsCountOutputType without action
 */
export type DocumentsCountOutputTypeCountBlocksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BlockWhereInput
}


export type DocumentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  blocks?: boolean | Prisma.Documents$blocksArgs<ExtArgs>
  _count?: boolean | Prisma.DocumentsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documents"]>

export type DocumentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documents"]>

export type DocumentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["documents"]>

export type DocumentsSelectScalar = {
  id?: boolean
  title?: boolean
  ownerId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DocumentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["documents"]>
export type DocumentsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  blocks?: boolean | Prisma.Documents$blocksArgs<ExtArgs>
  _count?: boolean | Prisma.DocumentsCountOutputTypeDefaultArgs<ExtArgs>
}
export type DocumentsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DocumentsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  owner?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DocumentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Documents"
  objects: {
    owner: Prisma.$UserPayload<ExtArgs>
    blocks: Prisma.$BlockPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    ownerId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["documents"]>
  composites: {}
}

export type DocumentsGetPayload<S extends boolean | null | undefined | DocumentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DocumentsPayload, S>

export type DocumentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DocumentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DocumentsCountAggregateInputType | true
  }

export interface DocumentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Documents'], meta: { name: 'Documents' } }
  /**
   * Find zero or one Documents that matches the filter.
   * @param {DocumentsFindUniqueArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DocumentsFindUniqueArgs>(args: Prisma.SelectSubset<T, DocumentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Documents that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DocumentsFindUniqueOrThrowArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DocumentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DocumentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Documents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsFindFirstArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DocumentsFindFirstArgs>(args?: Prisma.SelectSubset<T, DocumentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Documents that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsFindFirstOrThrowArgs} args - Arguments to find a Documents
   * @example
   * // Get one Documents
   * const documents = await prisma.documents.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DocumentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DocumentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Documents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Documents
   * const documents = await prisma.documents.findMany()
   * 
   * // Get first 10 Documents
   * const documents = await prisma.documents.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const documentsWithIdOnly = await prisma.documents.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DocumentsFindManyArgs>(args?: Prisma.SelectSubset<T, DocumentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Documents.
   * @param {DocumentsCreateArgs} args - Arguments to create a Documents.
   * @example
   * // Create one Documents
   * const Documents = await prisma.documents.create({
   *   data: {
   *     // ... data to create a Documents
   *   }
   * })
   * 
   */
  create<T extends DocumentsCreateArgs>(args: Prisma.SelectSubset<T, DocumentsCreateArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Documents.
   * @param {DocumentsCreateManyArgs} args - Arguments to create many Documents.
   * @example
   * // Create many Documents
   * const documents = await prisma.documents.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DocumentsCreateManyArgs>(args?: Prisma.SelectSubset<T, DocumentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Documents and returns the data saved in the database.
   * @param {DocumentsCreateManyAndReturnArgs} args - Arguments to create many Documents.
   * @example
   * // Create many Documents
   * const documents = await prisma.documents.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Documents and only return the `id`
   * const documentsWithIdOnly = await prisma.documents.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DocumentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DocumentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Documents.
   * @param {DocumentsDeleteArgs} args - Arguments to delete one Documents.
   * @example
   * // Delete one Documents
   * const Documents = await prisma.documents.delete({
   *   where: {
   *     // ... filter to delete one Documents
   *   }
   * })
   * 
   */
  delete<T extends DocumentsDeleteArgs>(args: Prisma.SelectSubset<T, DocumentsDeleteArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Documents.
   * @param {DocumentsUpdateArgs} args - Arguments to update one Documents.
   * @example
   * // Update one Documents
   * const documents = await prisma.documents.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DocumentsUpdateArgs>(args: Prisma.SelectSubset<T, DocumentsUpdateArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Documents.
   * @param {DocumentsDeleteManyArgs} args - Arguments to filter Documents to delete.
   * @example
   * // Delete a few Documents
   * const { count } = await prisma.documents.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DocumentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, DocumentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Documents
   * const documents = await prisma.documents.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DocumentsUpdateManyArgs>(args: Prisma.SelectSubset<T, DocumentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Documents and returns the data updated in the database.
   * @param {DocumentsUpdateManyAndReturnArgs} args - Arguments to update many Documents.
   * @example
   * // Update many Documents
   * const documents = await prisma.documents.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Documents and only return the `id`
   * const documentsWithIdOnly = await prisma.documents.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DocumentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DocumentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Documents.
   * @param {DocumentsUpsertArgs} args - Arguments to update or create a Documents.
   * @example
   * // Update or create a Documents
   * const documents = await prisma.documents.upsert({
   *   create: {
   *     // ... data to create a Documents
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Documents we want to update
   *   }
   * })
   */
  upsert<T extends DocumentsUpsertArgs>(args: Prisma.SelectSubset<T, DocumentsUpsertArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsCountArgs} args - Arguments to filter Documents to count.
   * @example
   * // Count the number of Documents
   * const count = await prisma.documents.count({
   *   where: {
   *     // ... the filter for the Documents we want to count
   *   }
   * })
  **/
  count<T extends DocumentsCountArgs>(
    args?: Prisma.Subset<T, DocumentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DocumentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DocumentsAggregateArgs>(args: Prisma.Subset<T, DocumentsAggregateArgs>): Prisma.PrismaPromise<GetDocumentsAggregateType<T>>

  /**
   * Group by Documents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DocumentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DocumentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DocumentsGroupByArgs['orderBy'] }
      : { orderBy?: DocumentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DocumentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDocumentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Documents model
 */
readonly fields: DocumentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Documents.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DocumentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  owner<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  blocks<T extends Prisma.Documents$blocksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Documents$blocksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Documents model
 */
export interface DocumentsFieldRefs {
  readonly id: Prisma.FieldRef<"Documents", 'Int'>
  readonly title: Prisma.FieldRef<"Documents", 'String'>
  readonly ownerId: Prisma.FieldRef<"Documents", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Documents", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Documents", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Documents findUnique
 */
export type DocumentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter, which Documents to fetch.
   */
  where: Prisma.DocumentsWhereUniqueInput
}

/**
 * Documents findUniqueOrThrow
 */
export type DocumentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter, which Documents to fetch.
   */
  where: Prisma.DocumentsWhereUniqueInput
}

/**
 * Documents findFirst
 */
export type DocumentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter, which Documents to fetch.
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Documents to fetch.
   */
  orderBy?: Prisma.DocumentsOrderByWithRelationInput | Prisma.DocumentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Documents.
   */
  cursor?: Prisma.DocumentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Documents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Documents.
   */
  distinct?: Prisma.DocumentsScalarFieldEnum | Prisma.DocumentsScalarFieldEnum[]
}

/**
 * Documents findFirstOrThrow
 */
export type DocumentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter, which Documents to fetch.
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Documents to fetch.
   */
  orderBy?: Prisma.DocumentsOrderByWithRelationInput | Prisma.DocumentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Documents.
   */
  cursor?: Prisma.DocumentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Documents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Documents.
   */
  distinct?: Prisma.DocumentsScalarFieldEnum | Prisma.DocumentsScalarFieldEnum[]
}

/**
 * Documents findMany
 */
export type DocumentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter, which Documents to fetch.
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Documents to fetch.
   */
  orderBy?: Prisma.DocumentsOrderByWithRelationInput | Prisma.DocumentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Documents.
   */
  cursor?: Prisma.DocumentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Documents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Documents.
   */
  skip?: number
  distinct?: Prisma.DocumentsScalarFieldEnum | Prisma.DocumentsScalarFieldEnum[]
}

/**
 * Documents create
 */
export type DocumentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * The data needed to create a Documents.
   */
  data: Prisma.XOR<Prisma.DocumentsCreateInput, Prisma.DocumentsUncheckedCreateInput>
}

/**
 * Documents createMany
 */
export type DocumentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Documents.
   */
  data: Prisma.DocumentsCreateManyInput | Prisma.DocumentsCreateManyInput[]
}

/**
 * Documents createManyAndReturn
 */
export type DocumentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * The data used to create many Documents.
   */
  data: Prisma.DocumentsCreateManyInput | Prisma.DocumentsCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Documents update
 */
export type DocumentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * The data needed to update a Documents.
   */
  data: Prisma.XOR<Prisma.DocumentsUpdateInput, Prisma.DocumentsUncheckedUpdateInput>
  /**
   * Choose, which Documents to update.
   */
  where: Prisma.DocumentsWhereUniqueInput
}

/**
 * Documents updateMany
 */
export type DocumentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Documents.
   */
  data: Prisma.XOR<Prisma.DocumentsUpdateManyMutationInput, Prisma.DocumentsUncheckedUpdateManyInput>
  /**
   * Filter which Documents to update
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * Limit how many Documents to update.
   */
  limit?: number
}

/**
 * Documents updateManyAndReturn
 */
export type DocumentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * The data used to update Documents.
   */
  data: Prisma.XOR<Prisma.DocumentsUpdateManyMutationInput, Prisma.DocumentsUncheckedUpdateManyInput>
  /**
   * Filter which Documents to update
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * Limit how many Documents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Documents upsert
 */
export type DocumentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * The filter to search for the Documents to update in case it exists.
   */
  where: Prisma.DocumentsWhereUniqueInput
  /**
   * In case the Documents found by the `where` argument doesn't exist, create a new Documents with this data.
   */
  create: Prisma.XOR<Prisma.DocumentsCreateInput, Prisma.DocumentsUncheckedCreateInput>
  /**
   * In case the Documents was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DocumentsUpdateInput, Prisma.DocumentsUncheckedUpdateInput>
}

/**
 * Documents delete
 */
export type DocumentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
  /**
   * Filter which Documents to delete.
   */
  where: Prisma.DocumentsWhereUniqueInput
}

/**
 * Documents deleteMany
 */
export type DocumentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Documents to delete
   */
  where?: Prisma.DocumentsWhereInput
  /**
   * Limit how many Documents to delete.
   */
  limit?: number
}

/**
 * Documents.blocks
 */
export type Documents$blocksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  where?: Prisma.BlockWhereInput
  orderBy?: Prisma.BlockOrderByWithRelationInput | Prisma.BlockOrderByWithRelationInput[]
  cursor?: Prisma.BlockWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BlockScalarFieldEnum | Prisma.BlockScalarFieldEnum[]
}

/**
 * Documents without action
 */
export type DocumentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Documents
   */
  select?: Prisma.DocumentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Documents
   */
  omit?: Prisma.DocumentsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DocumentsInclude<ExtArgs> | null
}
