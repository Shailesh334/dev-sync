
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Block` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Block
 * 
 */
export type BlockModel = runtime.Types.Result.DefaultSelection<Prisma.$BlockPayload>

export type AggregateBlock = {
  _count: BlockCountAggregateOutputType | null
  _avg: BlockAvgAggregateOutputType | null
  _sum: BlockSumAggregateOutputType | null
  _min: BlockMinAggregateOutputType | null
  _max: BlockMaxAggregateOutputType | null
}

export type BlockAvgAggregateOutputType = {
  id: number | null
  documentId: number | null
  userId: number | null
}

export type BlockSumAggregateOutputType = {
  id: number | null
  documentId: number | null
  userId: number | null
}

export type BlockMinAggregateOutputType = {
  id: number | null
  type: $Enums.BlockType | null
  documentId: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BlockMaxAggregateOutputType = {
  id: number | null
  type: $Enums.BlockType | null
  documentId: number | null
  userId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BlockCountAggregateOutputType = {
  id: number
  type: number
  content: number
  documentId: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BlockAvgAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
}

export type BlockSumAggregateInputType = {
  id?: true
  documentId?: true
  userId?: true
}

export type BlockMinAggregateInputType = {
  id?: true
  type?: true
  documentId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type BlockMaxAggregateInputType = {
  id?: true
  type?: true
  documentId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type BlockCountAggregateInputType = {
  id?: true
  type?: true
  content?: true
  documentId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BlockAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Block to aggregate.
   */
  where?: Prisma.BlockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blocks to fetch.
   */
  orderBy?: Prisma.BlockOrderByWithRelationInput | Prisma.BlockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BlockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Blocks
  **/
  _count?: true | BlockCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BlockAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BlockSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BlockMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BlockMaxAggregateInputType
}

export type GetBlockAggregateType<T extends BlockAggregateArgs> = {
      [P in keyof T & keyof AggregateBlock]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBlock[P]>
    : Prisma.GetScalarType<T[P], AggregateBlock[P]>
}




export type BlockGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BlockWhereInput
  orderBy?: Prisma.BlockOrderByWithAggregationInput | Prisma.BlockOrderByWithAggregationInput[]
  by: Prisma.BlockScalarFieldEnum[] | Prisma.BlockScalarFieldEnum
  having?: Prisma.BlockScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BlockCountAggregateInputType | true
  _avg?: BlockAvgAggregateInputType
  _sum?: BlockSumAggregateInputType
  _min?: BlockMinAggregateInputType
  _max?: BlockMaxAggregateInputType
}

export type BlockGroupByOutputType = {
  id: number
  type: $Enums.BlockType
  content: runtime.JsonValue
  documentId: number
  userId: number | null
  createdAt: Date
  updatedAt: Date
  _count: BlockCountAggregateOutputType | null
  _avg: BlockAvgAggregateOutputType | null
  _sum: BlockSumAggregateOutputType | null
  _min: BlockMinAggregateOutputType | null
  _max: BlockMaxAggregateOutputType | null
}

type GetBlockGroupByPayload<T extends BlockGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BlockGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BlockGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BlockGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BlockGroupByOutputType[P]>
      }
    >
  >



export type BlockWhereInput = {
  AND?: Prisma.BlockWhereInput | Prisma.BlockWhereInput[]
  OR?: Prisma.BlockWhereInput[]
  NOT?: Prisma.BlockWhereInput | Prisma.BlockWhereInput[]
  id?: Prisma.IntFilter<"Block"> | number
  type?: Prisma.EnumBlockTypeFilter<"Block"> | $Enums.BlockType
  content?: Prisma.JsonFilter<"Block">
  documentId?: Prisma.IntFilter<"Block"> | number
  userId?: Prisma.IntNullableFilter<"Block"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Block"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Block"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentsScalarRelationFilter, Prisma.DocumentsWhereInput>
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type BlockOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  document?: Prisma.DocumentsOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type BlockWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.BlockWhereInput | Prisma.BlockWhereInput[]
  OR?: Prisma.BlockWhereInput[]
  NOT?: Prisma.BlockWhereInput | Prisma.BlockWhereInput[]
  type?: Prisma.EnumBlockTypeFilter<"Block"> | $Enums.BlockType
  content?: Prisma.JsonFilter<"Block">
  documentId?: Prisma.IntFilter<"Block"> | number
  userId?: Prisma.IntNullableFilter<"Block"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Block"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Block"> | Date | string
  document?: Prisma.XOR<Prisma.DocumentsScalarRelationFilter, Prisma.DocumentsWhereInput>
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type BlockOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BlockCountOrderByAggregateInput
  _avg?: Prisma.BlockAvgOrderByAggregateInput
  _max?: Prisma.BlockMaxOrderByAggregateInput
  _min?: Prisma.BlockMinOrderByAggregateInput
  _sum?: Prisma.BlockSumOrderByAggregateInput
}

export type BlockScalarWhereWithAggregatesInput = {
  AND?: Prisma.BlockScalarWhereWithAggregatesInput | Prisma.BlockScalarWhereWithAggregatesInput[]
  OR?: Prisma.BlockScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BlockScalarWhereWithAggregatesInput | Prisma.BlockScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Block"> | number
  type?: Prisma.EnumBlockTypeWithAggregatesFilter<"Block"> | $Enums.BlockType
  content?: Prisma.JsonWithAggregatesFilter<"Block">
  documentId?: Prisma.IntWithAggregatesFilter<"Block"> | number
  userId?: Prisma.IntNullableWithAggregatesFilter<"Block"> | number | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Block"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Block"> | Date | string
}

export type BlockCreateInput = {
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  document: Prisma.DocumentsCreateNestedOneWithoutBlocksInput
  user?: Prisma.UserCreateNestedOneWithoutBlocksInput
}

export type BlockUncheckedCreateInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: number
  userId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockUpdateInput = {
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentsUpdateOneRequiredWithoutBlocksNestedInput
  user?: Prisma.UserUpdateOneWithoutBlocksNestedInput
}

export type BlockUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockCreateManyInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: number
  userId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockUpdateManyMutationInput = {
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockListRelationFilter = {
  every?: Prisma.BlockWhereInput
  some?: Prisma.BlockWhereInput
  none?: Prisma.BlockWhereInput
}

export type BlockOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type BlockCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  content?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlockAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BlockMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlockMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BlockSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  documentId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type BlockCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput> | Prisma.BlockCreateWithoutUserInput[] | Prisma.BlockUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutUserInput | Prisma.BlockCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BlockCreateManyUserInputEnvelope
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
}

export type BlockUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput> | Prisma.BlockCreateWithoutUserInput[] | Prisma.BlockUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutUserInput | Prisma.BlockCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.BlockCreateManyUserInputEnvelope
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
}

export type BlockUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput> | Prisma.BlockCreateWithoutUserInput[] | Prisma.BlockUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutUserInput | Prisma.BlockCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BlockUpsertWithWhereUniqueWithoutUserInput | Prisma.BlockUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BlockCreateManyUserInputEnvelope
  set?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  disconnect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  delete?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  update?: Prisma.BlockUpdateWithWhereUniqueWithoutUserInput | Prisma.BlockUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BlockUpdateManyWithWhereWithoutUserInput | Prisma.BlockUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
}

export type BlockUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput> | Prisma.BlockCreateWithoutUserInput[] | Prisma.BlockUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutUserInput | Prisma.BlockCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.BlockUpsertWithWhereUniqueWithoutUserInput | Prisma.BlockUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.BlockCreateManyUserInputEnvelope
  set?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  disconnect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  delete?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  update?: Prisma.BlockUpdateWithWhereUniqueWithoutUserInput | Prisma.BlockUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.BlockUpdateManyWithWhereWithoutUserInput | Prisma.BlockUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
}

export type BlockCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput> | Prisma.BlockCreateWithoutDocumentInput[] | Prisma.BlockUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutDocumentInput | Prisma.BlockCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.BlockCreateManyDocumentInputEnvelope
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
}

export type BlockUncheckedCreateNestedManyWithoutDocumentInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput> | Prisma.BlockCreateWithoutDocumentInput[] | Prisma.BlockUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutDocumentInput | Prisma.BlockCreateOrConnectWithoutDocumentInput[]
  createMany?: Prisma.BlockCreateManyDocumentInputEnvelope
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
}

export type BlockUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput> | Prisma.BlockCreateWithoutDocumentInput[] | Prisma.BlockUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutDocumentInput | Prisma.BlockCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.BlockUpsertWithWhereUniqueWithoutDocumentInput | Prisma.BlockUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.BlockCreateManyDocumentInputEnvelope
  set?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  disconnect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  delete?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  update?: Prisma.BlockUpdateWithWhereUniqueWithoutDocumentInput | Prisma.BlockUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.BlockUpdateManyWithWhereWithoutDocumentInput | Prisma.BlockUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
}

export type BlockUncheckedUpdateManyWithoutDocumentNestedInput = {
  create?: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput> | Prisma.BlockCreateWithoutDocumentInput[] | Prisma.BlockUncheckedCreateWithoutDocumentInput[]
  connectOrCreate?: Prisma.BlockCreateOrConnectWithoutDocumentInput | Prisma.BlockCreateOrConnectWithoutDocumentInput[]
  upsert?: Prisma.BlockUpsertWithWhereUniqueWithoutDocumentInput | Prisma.BlockUpsertWithWhereUniqueWithoutDocumentInput[]
  createMany?: Prisma.BlockCreateManyDocumentInputEnvelope
  set?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  disconnect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  delete?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  connect?: Prisma.BlockWhereUniqueInput | Prisma.BlockWhereUniqueInput[]
  update?: Prisma.BlockUpdateWithWhereUniqueWithoutDocumentInput | Prisma.BlockUpdateWithWhereUniqueWithoutDocumentInput[]
  updateMany?: Prisma.BlockUpdateManyWithWhereWithoutDocumentInput | Prisma.BlockUpdateManyWithWhereWithoutDocumentInput[]
  deleteMany?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
}

export type EnumBlockTypeFieldUpdateOperationsInput = {
  set?: $Enums.BlockType
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type BlockCreateWithoutUserInput = {
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  document: Prisma.DocumentsCreateNestedOneWithoutBlocksInput
}

export type BlockUncheckedCreateWithoutUserInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockCreateOrConnectWithoutUserInput = {
  where: Prisma.BlockWhereUniqueInput
  create: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput>
}

export type BlockCreateManyUserInputEnvelope = {
  data: Prisma.BlockCreateManyUserInput | Prisma.BlockCreateManyUserInput[]
}

export type BlockUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.BlockWhereUniqueInput
  update: Prisma.XOR<Prisma.BlockUpdateWithoutUserInput, Prisma.BlockUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.BlockCreateWithoutUserInput, Prisma.BlockUncheckedCreateWithoutUserInput>
}

export type BlockUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.BlockWhereUniqueInput
  data: Prisma.XOR<Prisma.BlockUpdateWithoutUserInput, Prisma.BlockUncheckedUpdateWithoutUserInput>
}

export type BlockUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.BlockScalarWhereInput
  data: Prisma.XOR<Prisma.BlockUpdateManyMutationInput, Prisma.BlockUncheckedUpdateManyWithoutUserInput>
}

export type BlockScalarWhereInput = {
  AND?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
  OR?: Prisma.BlockScalarWhereInput[]
  NOT?: Prisma.BlockScalarWhereInput | Prisma.BlockScalarWhereInput[]
  id?: Prisma.IntFilter<"Block"> | number
  type?: Prisma.EnumBlockTypeFilter<"Block"> | $Enums.BlockType
  content?: Prisma.JsonFilter<"Block">
  documentId?: Prisma.IntFilter<"Block"> | number
  userId?: Prisma.IntNullableFilter<"Block"> | number | null
  createdAt?: Prisma.DateTimeFilter<"Block"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Block"> | Date | string
}

export type BlockCreateWithoutDocumentInput = {
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutBlocksInput
}

export type BlockUncheckedCreateWithoutDocumentInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockCreateOrConnectWithoutDocumentInput = {
  where: Prisma.BlockWhereUniqueInput
  create: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput>
}

export type BlockCreateManyDocumentInputEnvelope = {
  data: Prisma.BlockCreateManyDocumentInput | Prisma.BlockCreateManyDocumentInput[]
}

export type BlockUpsertWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.BlockWhereUniqueInput
  update: Prisma.XOR<Prisma.BlockUpdateWithoutDocumentInput, Prisma.BlockUncheckedUpdateWithoutDocumentInput>
  create: Prisma.XOR<Prisma.BlockCreateWithoutDocumentInput, Prisma.BlockUncheckedCreateWithoutDocumentInput>
}

export type BlockUpdateWithWhereUniqueWithoutDocumentInput = {
  where: Prisma.BlockWhereUniqueInput
  data: Prisma.XOR<Prisma.BlockUpdateWithoutDocumentInput, Prisma.BlockUncheckedUpdateWithoutDocumentInput>
}

export type BlockUpdateManyWithWhereWithoutDocumentInput = {
  where: Prisma.BlockScalarWhereInput
  data: Prisma.XOR<Prisma.BlockUpdateManyMutationInput, Prisma.BlockUncheckedUpdateManyWithoutDocumentInput>
}

export type BlockCreateManyUserInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockUpdateWithoutUserInput = {
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  document?: Prisma.DocumentsUpdateOneRequiredWithoutBlocksNestedInput
}

export type BlockUncheckedUpdateWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  documentId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockCreateManyDocumentInput = {
  id?: number
  type: $Enums.BlockType
  content: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userId?: number | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BlockUpdateWithoutDocumentInput = {
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutBlocksNestedInput
}

export type BlockUncheckedUpdateWithoutDocumentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BlockUncheckedUpdateManyWithoutDocumentInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  type?: Prisma.EnumBlockTypeFieldUpdateOperationsInput | $Enums.BlockType
  content?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type BlockSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  content?: boolean
  documentId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}, ExtArgs["result"]["block"]>

export type BlockSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  content?: boolean
  documentId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}, ExtArgs["result"]["block"]>

export type BlockSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  type?: boolean
  content?: boolean
  documentId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}, ExtArgs["result"]["block"]>

export type BlockSelectScalar = {
  id?: boolean
  type?: boolean
  content?: boolean
  documentId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BlockOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "type" | "content" | "documentId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["block"]>
export type BlockInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}
export type BlockIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}
export type BlockIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  document?: boolean | Prisma.DocumentsDefaultArgs<ExtArgs>
  user?: boolean | Prisma.Block$userArgs<ExtArgs>
}

export type $BlockPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Block"
  objects: {
    document: Prisma.$DocumentsPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    type: $Enums.BlockType
    content: runtime.JsonValue
    documentId: number
    userId: number | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["block"]>
  composites: {}
}

export type BlockGetPayload<S extends boolean | null | undefined | BlockDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BlockPayload, S>

export type BlockCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BlockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BlockCountAggregateInputType | true
  }

export interface BlockDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Block'], meta: { name: 'Block' } }
  /**
   * Find zero or one Block that matches the filter.
   * @param {BlockFindUniqueArgs} args - Arguments to find a Block
   * @example
   * // Get one Block
   * const block = await prisma.block.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BlockFindUniqueArgs>(args: Prisma.SelectSubset<T, BlockFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Block that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BlockFindUniqueOrThrowArgs} args - Arguments to find a Block
   * @example
   * // Get one Block
   * const block = await prisma.block.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BlockFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BlockFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Block that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockFindFirstArgs} args - Arguments to find a Block
   * @example
   * // Get one Block
   * const block = await prisma.block.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BlockFindFirstArgs>(args?: Prisma.SelectSubset<T, BlockFindFirstArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Block that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockFindFirstOrThrowArgs} args - Arguments to find a Block
   * @example
   * // Get one Block
   * const block = await prisma.block.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BlockFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BlockFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Blocks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Blocks
   * const blocks = await prisma.block.findMany()
   * 
   * // Get first 10 Blocks
   * const blocks = await prisma.block.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const blockWithIdOnly = await prisma.block.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BlockFindManyArgs>(args?: Prisma.SelectSubset<T, BlockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Block.
   * @param {BlockCreateArgs} args - Arguments to create a Block.
   * @example
   * // Create one Block
   * const Block = await prisma.block.create({
   *   data: {
   *     // ... data to create a Block
   *   }
   * })
   * 
   */
  create<T extends BlockCreateArgs>(args: Prisma.SelectSubset<T, BlockCreateArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Blocks.
   * @param {BlockCreateManyArgs} args - Arguments to create many Blocks.
   * @example
   * // Create many Blocks
   * const block = await prisma.block.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BlockCreateManyArgs>(args?: Prisma.SelectSubset<T, BlockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Blocks and returns the data saved in the database.
   * @param {BlockCreateManyAndReturnArgs} args - Arguments to create many Blocks.
   * @example
   * // Create many Blocks
   * const block = await prisma.block.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Blocks and only return the `id`
   * const blockWithIdOnly = await prisma.block.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BlockCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BlockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Block.
   * @param {BlockDeleteArgs} args - Arguments to delete one Block.
   * @example
   * // Delete one Block
   * const Block = await prisma.block.delete({
   *   where: {
   *     // ... filter to delete one Block
   *   }
   * })
   * 
   */
  delete<T extends BlockDeleteArgs>(args: Prisma.SelectSubset<T, BlockDeleteArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Block.
   * @param {BlockUpdateArgs} args - Arguments to update one Block.
   * @example
   * // Update one Block
   * const block = await prisma.block.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BlockUpdateArgs>(args: Prisma.SelectSubset<T, BlockUpdateArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Blocks.
   * @param {BlockDeleteManyArgs} args - Arguments to filter Blocks to delete.
   * @example
   * // Delete a few Blocks
   * const { count } = await prisma.block.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BlockDeleteManyArgs>(args?: Prisma.SelectSubset<T, BlockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Blocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Blocks
   * const block = await prisma.block.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BlockUpdateManyArgs>(args: Prisma.SelectSubset<T, BlockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Blocks and returns the data updated in the database.
   * @param {BlockUpdateManyAndReturnArgs} args - Arguments to update many Blocks.
   * @example
   * // Update many Blocks
   * const block = await prisma.block.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Blocks and only return the `id`
   * const blockWithIdOnly = await prisma.block.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BlockUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BlockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Block.
   * @param {BlockUpsertArgs} args - Arguments to update or create a Block.
   * @example
   * // Update or create a Block
   * const block = await prisma.block.upsert({
   *   create: {
   *     // ... data to create a Block
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Block we want to update
   *   }
   * })
   */
  upsert<T extends BlockUpsertArgs>(args: Prisma.SelectSubset<T, BlockUpsertArgs<ExtArgs>>): Prisma.Prisma__BlockClient<runtime.Types.Result.GetResult<Prisma.$BlockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Blocks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockCountArgs} args - Arguments to filter Blocks to count.
   * @example
   * // Count the number of Blocks
   * const count = await prisma.block.count({
   *   where: {
   *     // ... the filter for the Blocks we want to count
   *   }
   * })
  **/
  count<T extends BlockCountArgs>(
    args?: Prisma.Subset<T, BlockCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BlockCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Block.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BlockAggregateArgs>(args: Prisma.Subset<T, BlockAggregateArgs>): Prisma.PrismaPromise<GetBlockAggregateType<T>>

  /**
   * Group by Block.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BlockGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BlockGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BlockGroupByArgs['orderBy'] }
      : { orderBy?: BlockGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BlockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Block model
 */
readonly fields: BlockFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Block.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BlockClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  document<T extends Prisma.DocumentsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DocumentsDefaultArgs<ExtArgs>>): Prisma.Prisma__DocumentsClient<runtime.Types.Result.GetResult<Prisma.$DocumentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.Block$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Block$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Block model
 */
export interface BlockFieldRefs {
  readonly id: Prisma.FieldRef<"Block", 'Int'>
  readonly type: Prisma.FieldRef<"Block", 'BlockType'>
  readonly content: Prisma.FieldRef<"Block", 'Json'>
  readonly documentId: Prisma.FieldRef<"Block", 'Int'>
  readonly userId: Prisma.FieldRef<"Block", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Block", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Block", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Block findUnique
 */
export type BlockFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter, which Block to fetch.
   */
  where: Prisma.BlockWhereUniqueInput
}

/**
 * Block findUniqueOrThrow
 */
export type BlockFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter, which Block to fetch.
   */
  where: Prisma.BlockWhereUniqueInput
}

/**
 * Block findFirst
 */
export type BlockFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter, which Block to fetch.
   */
  where?: Prisma.BlockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blocks to fetch.
   */
  orderBy?: Prisma.BlockOrderByWithRelationInput | Prisma.BlockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Blocks.
   */
  cursor?: Prisma.BlockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Blocks.
   */
  distinct?: Prisma.BlockScalarFieldEnum | Prisma.BlockScalarFieldEnum[]
}

/**
 * Block findFirstOrThrow
 */
export type BlockFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter, which Block to fetch.
   */
  where?: Prisma.BlockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blocks to fetch.
   */
  orderBy?: Prisma.BlockOrderByWithRelationInput | Prisma.BlockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Blocks.
   */
  cursor?: Prisma.BlockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blocks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Blocks.
   */
  distinct?: Prisma.BlockScalarFieldEnum | Prisma.BlockScalarFieldEnum[]
}

/**
 * Block findMany
 */
export type BlockFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter, which Blocks to fetch.
   */
  where?: Prisma.BlockWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Blocks to fetch.
   */
  orderBy?: Prisma.BlockOrderByWithRelationInput | Prisma.BlockOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Blocks.
   */
  cursor?: Prisma.BlockWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Blocks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Blocks.
   */
  skip?: number
  distinct?: Prisma.BlockScalarFieldEnum | Prisma.BlockScalarFieldEnum[]
}

/**
 * Block create
 */
export type BlockCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * The data needed to create a Block.
   */
  data: Prisma.XOR<Prisma.BlockCreateInput, Prisma.BlockUncheckedCreateInput>
}

/**
 * Block createMany
 */
export type BlockCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Blocks.
   */
  data: Prisma.BlockCreateManyInput | Prisma.BlockCreateManyInput[]
}

/**
 * Block createManyAndReturn
 */
export type BlockCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * The data used to create many Blocks.
   */
  data: Prisma.BlockCreateManyInput | Prisma.BlockCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Block update
 */
export type BlockUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * The data needed to update a Block.
   */
  data: Prisma.XOR<Prisma.BlockUpdateInput, Prisma.BlockUncheckedUpdateInput>
  /**
   * Choose, which Block to update.
   */
  where: Prisma.BlockWhereUniqueInput
}

/**
 * Block updateMany
 */
export type BlockUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Blocks.
   */
  data: Prisma.XOR<Prisma.BlockUpdateManyMutationInput, Prisma.BlockUncheckedUpdateManyInput>
  /**
   * Filter which Blocks to update
   */
  where?: Prisma.BlockWhereInput
  /**
   * Limit how many Blocks to update.
   */
  limit?: number
}

/**
 * Block updateManyAndReturn
 */
export type BlockUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * The data used to update Blocks.
   */
  data: Prisma.XOR<Prisma.BlockUpdateManyMutationInput, Prisma.BlockUncheckedUpdateManyInput>
  /**
   * Filter which Blocks to update
   */
  where?: Prisma.BlockWhereInput
  /**
   * Limit how many Blocks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Block upsert
 */
export type BlockUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * The filter to search for the Block to update in case it exists.
   */
  where: Prisma.BlockWhereUniqueInput
  /**
   * In case the Block found by the `where` argument doesn't exist, create a new Block with this data.
   */
  create: Prisma.XOR<Prisma.BlockCreateInput, Prisma.BlockUncheckedCreateInput>
  /**
   * In case the Block was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BlockUpdateInput, Prisma.BlockUncheckedUpdateInput>
}

/**
 * Block delete
 */
export type BlockDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
  /**
   * Filter which Block to delete.
   */
  where: Prisma.BlockWhereUniqueInput
}

/**
 * Block deleteMany
 */
export type BlockDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Blocks to delete
   */
  where?: Prisma.BlockWhereInput
  /**
   * Limit how many Blocks to delete.
   */
  limit?: number
}

/**
 * Block.user
 */
export type Block$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Block without action
 */
export type BlockDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Block
   */
  select?: Prisma.BlockSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Block
   */
  omit?: Prisma.BlockOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BlockInclude<ExtArgs> | null
}
